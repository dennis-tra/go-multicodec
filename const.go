// Code generated by go generate; DO NOT EDIT.
package multicodec

// Codec serves the purpose of type safety when passing around codecs
type Codec uint64

// These are multicodec-packed content types.
const (
	// multihash: raw binary
	IDENTITY Codec = 0x00
	// ipld: CIDv1
	CIDV1 Codec = 0x01
	// ipld: CIDv2
	CIDV2 Codec = 0x02
	// ipld: CIDv3
	CIDV3 Codec = 0x03
	// multiaddr
	IP4 Codec = 0x04
	// multiaddr
	TCP Codec = 0x06
	// multihash
	SHA1 Codec = 0x11
	// multihash
	SHA2_256 Codec = 0x12
	// multihash
	SHA2_512 Codec = 0x13
	// multihash
	SHA3_512 Codec = 0x14
	// multihash
	SHA3_384 Codec = 0x15
	// multihash
	SHA3_256 Codec = 0x16
	// multihash
	SHA3_224 Codec = 0x17
	// multihash
	SHAKE_128 Codec = 0x18
	// multihash
	SHAKE_256 Codec = 0x19
	// multihash: keccak has variable output length. The number specifies the core length
	KECCAK_224 Codec = 0x1a
	// multihash
	KECCAK_256 Codec = 0x1b
	// multihash
	KECCAK_384 Codec = 0x1c
	// multihash
	KECCAK_512 Codec = 0x1d
	// multihash: BLAKE3 has a default 32 byte output length. The maximum length is (2^64)-1 bytes.
	BLAKE3 Codec = 0x1e
	// multiaddr
	DCCP Codec = 0x21
	// multihash
	MURMUR3_128 Codec = 0x22
	// multihash
	MURMUR3_32 Codec = 0x23
	// multiaddr
	IP6 Codec = 0x29
	// multiaddr
	IP6ZONE Codec = 0x2a
	// namespace: Namespace for string paths. Corresponds to `/` in ASCII.
	PATH Codec = 0x2f
	// multiformat
	MULTICODEC Codec = 0x30
	// multiformat
	MULTIHASH Codec = 0x31
	// multiformat
	MULTIADDR Codec = 0x32
	// multiformat
	MULTIBASE Codec = 0x33
	// multiaddr
	DNS Codec = 0x35
	// multiaddr
	DNS4 Codec = 0x36
	// multiaddr
	DNS6 Codec = 0x37
	// multiaddr
	DNSADDR Codec = 0x38
	// serialization: Protocol Buffers
	PROTOBUF Codec = 0x50
	// serialization: CBOR
	CBOR Codec = 0x51
	// ipld: raw binary
	RAW Codec = 0x55
	// multihash
	DBL_SHA2_256 Codec = 0x56
	// serialization: recursive length prefix
	RLP Codec = 0x60
	// serialization: bencode
	BENCODE Codec = 0x63
	// ipld: MerkleDAG protobuf
	DAG_PB Codec = 0x70
	// ipld: MerkleDAG cbor
	DAG_CBOR Codec = 0x71
	// ipld: Libp2p Public Key
	LIBP2P_KEY Codec = 0x72
	// ipld: Raw Git object
	GIT_RAW Codec = 0x78
	// ipld: Torrent file info field (bencoded)
	TORRENT_INFO Codec = 0x7b
	// ipld: Torrent file (bencoded)
	TORRENT_FILE Codec = 0x7c
	// ipld: Leofcoin Block
	LEOFCOIN_BLOCK Codec = 0x81
	// ipld: Leofcoin Transaction
	LEOFCOIN_TX Codec = 0x82
	// ipld: Leofcoin Peer Reputation
	LEOFCOIN_PR Codec = 0x83
	// multiaddr
	SCTP Codec = 0x84
	// ipld: MerkleDAG JOSE
	DAG_JOSE Codec = 0x85
	// ipld: MerkleDAG COSE
	DAG_COSE Codec = 0x86
	// ipld: Ethereum Block (RLP)
	ETH_BLOCK Codec = 0x90
	// ipld: Ethereum Block List (RLP)
	ETH_BLOCK_LIST Codec = 0x91
	// ipld: Ethereum Transaction Trie (Eth-Trie)
	ETH_TX_TRIE Codec = 0x92
	// ipld: Ethereum Transaction (RLP)
	ETH_TX Codec = 0x93
	// ipld: Ethereum Transaction Receipt Trie (Eth-Trie)
	ETH_TX_RECEIPT_TRIE Codec = 0x94
	// ipld: Ethereum Transaction Receipt (RLP)
	ETH_TX_RECEIPT Codec = 0x95
	// ipld: Ethereum State Trie (Eth-Secure-Trie)
	ETH_STATE_TRIE Codec = 0x96
	// ipld: Ethereum Account Snapshot (RLP)
	ETH_ACCOUNT_SNAPSHOT Codec = 0x97
	// ipld: Ethereum Contract Storage Trie (Eth-Secure-Trie)
	ETH_STORAGE_TRIE Codec = 0x98
	// ipld: Bitcoin Block
	BITCOIN_BLOCK Codec = 0xb0
	// ipld: Bitcoin Tx
	BITCOIN_TX Codec = 0xb1
	// ipld: Bitcoin Witness Commitment
	BITCOIN_WITNESS_COMMITMENT Codec = 0xb2
	// ipld: Zcash Block
	ZCASH_BLOCK Codec = 0xc0
	// ipld: Zcash Tx
	ZCASH_TX Codec = 0xc1
	// namespace: Ceramic Document Id
	DOCID Codec = 0xce
	// ipld: Stellar Block
	STELLAR_BLOCK Codec = 0xd0
	// ipld: Stellar Tx
	STELLAR_TX Codec = 0xd1
	// multihash
	MD4 Codec = 0xd4
	// multihash
	MD5 Codec = 0xd5
	// multihash: Binary Merkle Tree Hash
	BMT Codec = 0xd6
	// ipld: Decred Block
	DECRED_BLOCK Codec = 0xe0
	// ipld: Decred Tx
	DECRED_TX Codec = 0xe1
	// namespace: IPLD path
	IPLD_NS Codec = 0xe2
	// namespace: IPFS path
	IPFS_NS Codec = 0xe3
	// namespace: Swarm path
	SWARM_NS Codec = 0xe4
	// namespace: IPNS path
	IPNS_NS Codec = 0xe5
	// namespace: ZeroNet site address
	ZERONET Codec = 0xe6
	// key: Secp256k1 public key
	SECP256K1_PUB Codec = 0xe7
	// key: BLS12-381 public key in the G1 field
	BLS12_381_G1_PUB Codec = 0xea
	// key: BLS12-381 public key in the G2 field
	BLS12_381_G2_PUB Codec = 0xeb
	// key: Curve25519 public key
	X25519_PUB Codec = 0xec
	// key: Ed25519 public key
	ED25519_PUB Codec = 0xed
	// key: BLS12-381 concatenated public keys in both the G1 and G2 fields
	BLS12_381_G1G2_PUB Codec = 0xee
	// ipld: Dash Block
	DASH_BLOCK Codec = 0xf0
	// ipld: Dash Tx
	DASH_TX Codec = 0xf1
	// ipld: Swarm Manifest
	SWARM_MANIFEST Codec = 0xfa
	// ipld: Swarm Feed
	SWARM_FEED Codec = 0xfb
	// multiaddr
	UDP Codec = 0x0111
	// multiaddr
	P2P_WEBRTC_STAR Codec = 0x0113
	// multiaddr
	P2P_WEBRTC_DIRECT Codec = 0x0114
	// multiaddr
	P2P_STARDUST Codec = 0x0115
	// multiaddr
	P2P_CIRCUIT Codec = 0x0122
	// ipld: MerkleDAG json
	DAG_JSON Codec = 0x0129
	// multiaddr
	UDT Codec = 0x012d
	// multiaddr
	UTP Codec = 0x012e
	// multiaddr
	UNIX Codec = 0x0190
	// multiaddr: libp2p
	P2P Codec = 0x01a5
	// Deprecated: multiaddr: libp2p (deprecated)
	IPFS Codec = 0x01a5
	// multiaddr
	HTTPS Codec = 0x01bb
	// multiaddr
	ONION Codec = 0x01bc
	// multiaddr
	ONION3 Codec = 0x01bd
	// multiaddr: I2P base64 (raw public key)
	GARLIC64 Codec = 0x01be
	// multiaddr: I2P base32 (hashed public key or encoded public key/checksum+optional secret)
	GARLIC32 Codec = 0x01bf
	// multiaddr
	TLS Codec = 0x01c0
	// multiaddr
	QUIC Codec = 0x01cc
	// multiaddr
	WS Codec = 0x01dd
	// multiaddr
	WSS Codec = 0x01de
	// multiaddr
	P2P_WEBSOCKET_STAR Codec = 0x01df
	// multiaddr
	HTTP Codec = 0x01e0
	// serialization: JSON (UTF-8-encoded)
	JSON Codec = 0x0200
	// serialization: MessagePack
	MESSAGEPACK Codec = 0x0201
	// libp2p: libp2p peer record type
	LIBP2P_PEER_RECORD Codec = 0x0301
	// multihash: SHA2-256 with the two most significant bits from the last byte zeroed (as via a mask with 0b00111111) - used for proving trees as in Filecoin
	SHA2_256_TRUNC254_PADDED Codec = 0x1012
	// multihash
	RIPEMD_128 Codec = 0x1052
	// multihash
	RIPEMD_160 Codec = 0x1053
	// multihash
	RIPEMD_256 Codec = 0x1054
	// multihash
	RIPEMD_320 Codec = 0x1055
	// multihash
	X11 Codec = 0x1100
	// key: P-256 public Key
	P256_PUB Codec = 0x1200
	// key: P-384 public Key
	P384_PUB Codec = 0x1201
	// key: P-521 public Key
	P521_PUB Codec = 0x1202
	// key: Ed448 public Key
	ED448_PUB Codec = 0x1203
	// key: X448 public Key
	X448_PUB Codec = 0x1204
	// key: Ed25519 private key
	ED25519_PRIV Codec = 0x1300
	// multihash: KangarooTwelve is an extendable-output hash function based on Keccak-p
	KANGAROOTWELVE Codec = 0x1d01
	// multihash
	SM3_256 Codec = 0x534d
	// multihash: Blake2b consists of 64 output lengths that give different hashes
	BLAKE2B_8 Codec = 0xb201
	// multihash
	BLAKE2B_16 Codec = 0xb202
	// multihash
	BLAKE2B_24 Codec = 0xb203
	// multihash
	BLAKE2B_32 Codec = 0xb204
	// multihash
	BLAKE2B_40 Codec = 0xb205
	// multihash
	BLAKE2B_48 Codec = 0xb206
	// multihash
	BLAKE2B_56 Codec = 0xb207
	// multihash
	BLAKE2B_64 Codec = 0xb208
	// multihash
	BLAKE2B_72 Codec = 0xb209
	// multihash
	BLAKE2B_80 Codec = 0xb20a
	// multihash
	BLAKE2B_88 Codec = 0xb20b
	// multihash
	BLAKE2B_96 Codec = 0xb20c
	// multihash
	BLAKE2B_104 Codec = 0xb20d
	// multihash
	BLAKE2B_112 Codec = 0xb20e
	// multihash
	BLAKE2B_120 Codec = 0xb20f
	// multihash
	BLAKE2B_128 Codec = 0xb210
	// multihash
	BLAKE2B_136 Codec = 0xb211
	// multihash
	BLAKE2B_144 Codec = 0xb212
	// multihash
	BLAKE2B_152 Codec = 0xb213
	// multihash
	BLAKE2B_160 Codec = 0xb214
	// multihash
	BLAKE2B_168 Codec = 0xb215
	// multihash
	BLAKE2B_176 Codec = 0xb216
	// multihash
	BLAKE2B_184 Codec = 0xb217
	// multihash
	BLAKE2B_192 Codec = 0xb218
	// multihash
	BLAKE2B_200 Codec = 0xb219
	// multihash
	BLAKE2B_208 Codec = 0xb21a
	// multihash
	BLAKE2B_216 Codec = 0xb21b
	// multihash
	BLAKE2B_224 Codec = 0xb21c
	// multihash
	BLAKE2B_232 Codec = 0xb21d
	// multihash
	BLAKE2B_240 Codec = 0xb21e
	// multihash
	BLAKE2B_248 Codec = 0xb21f
	// multihash
	BLAKE2B_256 Codec = 0xb220
	// multihash
	BLAKE2B_264 Codec = 0xb221
	// multihash
	BLAKE2B_272 Codec = 0xb222
	// multihash
	BLAKE2B_280 Codec = 0xb223
	// multihash
	BLAKE2B_288 Codec = 0xb224
	// multihash
	BLAKE2B_296 Codec = 0xb225
	// multihash
	BLAKE2B_304 Codec = 0xb226
	// multihash
	BLAKE2B_312 Codec = 0xb227
	// multihash
	BLAKE2B_320 Codec = 0xb228
	// multihash
	BLAKE2B_328 Codec = 0xb229
	// multihash
	BLAKE2B_336 Codec = 0xb22a
	// multihash
	BLAKE2B_344 Codec = 0xb22b
	// multihash
	BLAKE2B_352 Codec = 0xb22c
	// multihash
	BLAKE2B_360 Codec = 0xb22d
	// multihash
	BLAKE2B_368 Codec = 0xb22e
	// multihash
	BLAKE2B_376 Codec = 0xb22f
	// multihash
	BLAKE2B_384 Codec = 0xb230
	// multihash
	BLAKE2B_392 Codec = 0xb231
	// multihash
	BLAKE2B_400 Codec = 0xb232
	// multihash
	BLAKE2B_408 Codec = 0xb233
	// multihash
	BLAKE2B_416 Codec = 0xb234
	// multihash
	BLAKE2B_424 Codec = 0xb235
	// multihash
	BLAKE2B_432 Codec = 0xb236
	// multihash
	BLAKE2B_440 Codec = 0xb237
	// multihash
	BLAKE2B_448 Codec = 0xb238
	// multihash
	BLAKE2B_456 Codec = 0xb239
	// multihash
	BLAKE2B_464 Codec = 0xb23a
	// multihash
	BLAKE2B_472 Codec = 0xb23b
	// multihash
	BLAKE2B_480 Codec = 0xb23c
	// multihash
	BLAKE2B_488 Codec = 0xb23d
	// multihash
	BLAKE2B_496 Codec = 0xb23e
	// multihash
	BLAKE2B_504 Codec = 0xb23f
	// multihash
	BLAKE2B_512 Codec = 0xb240
	// multihash: Blake2s consists of 32 output lengths that give different hashes
	BLAKE2S_8 Codec = 0xb241
	// multihash
	BLAKE2S_16 Codec = 0xb242
	// multihash
	BLAKE2S_24 Codec = 0xb243
	// multihash
	BLAKE2S_32 Codec = 0xb244
	// multihash
	BLAKE2S_40 Codec = 0xb245
	// multihash
	BLAKE2S_48 Codec = 0xb246
	// multihash
	BLAKE2S_56 Codec = 0xb247
	// multihash
	BLAKE2S_64 Codec = 0xb248
	// multihash
	BLAKE2S_72 Codec = 0xb249
	// multihash
	BLAKE2S_80 Codec = 0xb24a
	// multihash
	BLAKE2S_88 Codec = 0xb24b
	// multihash
	BLAKE2S_96 Codec = 0xb24c
	// multihash
	BLAKE2S_104 Codec = 0xb24d
	// multihash
	BLAKE2S_112 Codec = 0xb24e
	// multihash
	BLAKE2S_120 Codec = 0xb24f
	// multihash
	BLAKE2S_128 Codec = 0xb250
	// multihash
	BLAKE2S_136 Codec = 0xb251
	// multihash
	BLAKE2S_144 Codec = 0xb252
	// multihash
	BLAKE2S_152 Codec = 0xb253
	// multihash
	BLAKE2S_160 Codec = 0xb254
	// multihash
	BLAKE2S_168 Codec = 0xb255
	// multihash
	BLAKE2S_176 Codec = 0xb256
	// multihash
	BLAKE2S_184 Codec = 0xb257
	// multihash
	BLAKE2S_192 Codec = 0xb258
	// multihash
	BLAKE2S_200 Codec = 0xb259
	// multihash
	BLAKE2S_208 Codec = 0xb25a
	// multihash
	BLAKE2S_216 Codec = 0xb25b
	// multihash
	BLAKE2S_224 Codec = 0xb25c
	// multihash
	BLAKE2S_232 Codec = 0xb25d
	// multihash
	BLAKE2S_240 Codec = 0xb25e
	// multihash
	BLAKE2S_248 Codec = 0xb25f
	// multihash
	BLAKE2S_256 Codec = 0xb260
	// multihash: Skein256 consists of 32 output lengths that give different hashes
	SKEIN256_8 Codec = 0xb301
	// multihash
	SKEIN256_16 Codec = 0xb302
	// multihash
	SKEIN256_24 Codec = 0xb303
	// multihash
	SKEIN256_32 Codec = 0xb304
	// multihash
	SKEIN256_40 Codec = 0xb305
	// multihash
	SKEIN256_48 Codec = 0xb306
	// multihash
	SKEIN256_56 Codec = 0xb307
	// multihash
	SKEIN256_64 Codec = 0xb308
	// multihash
	SKEIN256_72 Codec = 0xb309
	// multihash
	SKEIN256_80 Codec = 0xb30a
	// multihash
	SKEIN256_88 Codec = 0xb30b
	// multihash
	SKEIN256_96 Codec = 0xb30c
	// multihash
	SKEIN256_104 Codec = 0xb30d
	// multihash
	SKEIN256_112 Codec = 0xb30e
	// multihash
	SKEIN256_120 Codec = 0xb30f
	// multihash
	SKEIN256_128 Codec = 0xb310
	// multihash
	SKEIN256_136 Codec = 0xb311
	// multihash
	SKEIN256_144 Codec = 0xb312
	// multihash
	SKEIN256_152 Codec = 0xb313
	// multihash
	SKEIN256_160 Codec = 0xb314
	// multihash
	SKEIN256_168 Codec = 0xb315
	// multihash
	SKEIN256_176 Codec = 0xb316
	// multihash
	SKEIN256_184 Codec = 0xb317
	// multihash
	SKEIN256_192 Codec = 0xb318
	// multihash
	SKEIN256_200 Codec = 0xb319
	// multihash
	SKEIN256_208 Codec = 0xb31a
	// multihash
	SKEIN256_216 Codec = 0xb31b
	// multihash
	SKEIN256_224 Codec = 0xb31c
	// multihash
	SKEIN256_232 Codec = 0xb31d
	// multihash
	SKEIN256_240 Codec = 0xb31e
	// multihash
	SKEIN256_248 Codec = 0xb31f
	// multihash
	SKEIN256_256 Codec = 0xb320
	// multihash: Skein512 consists of 64 output lengths that give different hashes
	SKEIN512_8 Codec = 0xb321
	// multihash
	SKEIN512_16 Codec = 0xb322
	// multihash
	SKEIN512_24 Codec = 0xb323
	// multihash
	SKEIN512_32 Codec = 0xb324
	// multihash
	SKEIN512_40 Codec = 0xb325
	// multihash
	SKEIN512_48 Codec = 0xb326
	// multihash
	SKEIN512_56 Codec = 0xb327
	// multihash
	SKEIN512_64 Codec = 0xb328
	// multihash
	SKEIN512_72 Codec = 0xb329
	// multihash
	SKEIN512_80 Codec = 0xb32a
	// multihash
	SKEIN512_88 Codec = 0xb32b
	// multihash
	SKEIN512_96 Codec = 0xb32c
	// multihash
	SKEIN512_104 Codec = 0xb32d
	// multihash
	SKEIN512_112 Codec = 0xb32e
	// multihash
	SKEIN512_120 Codec = 0xb32f
	// multihash
	SKEIN512_128 Codec = 0xb330
	// multihash
	SKEIN512_136 Codec = 0xb331
	// multihash
	SKEIN512_144 Codec = 0xb332
	// multihash
	SKEIN512_152 Codec = 0xb333
	// multihash
	SKEIN512_160 Codec = 0xb334
	// multihash
	SKEIN512_168 Codec = 0xb335
	// multihash
	SKEIN512_176 Codec = 0xb336
	// multihash
	SKEIN512_184 Codec = 0xb337
	// multihash
	SKEIN512_192 Codec = 0xb338
	// multihash
	SKEIN512_200 Codec = 0xb339
	// multihash
	SKEIN512_208 Codec = 0xb33a
	// multihash
	SKEIN512_216 Codec = 0xb33b
	// multihash
	SKEIN512_224 Codec = 0xb33c
	// multihash
	SKEIN512_232 Codec = 0xb33d
	// multihash
	SKEIN512_240 Codec = 0xb33e
	// multihash
	SKEIN512_248 Codec = 0xb33f
	// multihash
	SKEIN512_256 Codec = 0xb340
	// multihash
	SKEIN512_264 Codec = 0xb341
	// multihash
	SKEIN512_272 Codec = 0xb342
	// multihash
	SKEIN512_280 Codec = 0xb343
	// multihash
	SKEIN512_288 Codec = 0xb344
	// multihash
	SKEIN512_296 Codec = 0xb345
	// multihash
	SKEIN512_304 Codec = 0xb346
	// multihash
	SKEIN512_312 Codec = 0xb347
	// multihash
	SKEIN512_320 Codec = 0xb348
	// multihash
	SKEIN512_328 Codec = 0xb349
	// multihash
	SKEIN512_336 Codec = 0xb34a
	// multihash
	SKEIN512_344 Codec = 0xb34b
	// multihash
	SKEIN512_352 Codec = 0xb34c
	// multihash
	SKEIN512_360 Codec = 0xb34d
	// multihash
	SKEIN512_368 Codec = 0xb34e
	// multihash
	SKEIN512_376 Codec = 0xb34f
	// multihash
	SKEIN512_384 Codec = 0xb350
	// multihash
	SKEIN512_392 Codec = 0xb351
	// multihash
	SKEIN512_400 Codec = 0xb352
	// multihash
	SKEIN512_408 Codec = 0xb353
	// multihash
	SKEIN512_416 Codec = 0xb354
	// multihash
	SKEIN512_424 Codec = 0xb355
	// multihash
	SKEIN512_432 Codec = 0xb356
	// multihash
	SKEIN512_440 Codec = 0xb357
	// multihash
	SKEIN512_448 Codec = 0xb358
	// multihash
	SKEIN512_456 Codec = 0xb359
	// multihash
	SKEIN512_464 Codec = 0xb35a
	// multihash
	SKEIN512_472 Codec = 0xb35b
	// multihash
	SKEIN512_480 Codec = 0xb35c
	// multihash
	SKEIN512_488 Codec = 0xb35d
	// multihash
	SKEIN512_496 Codec = 0xb35e
	// multihash
	SKEIN512_504 Codec = 0xb35f
	// multihash
	SKEIN512_512 Codec = 0xb360
	// multihash: Skein1024 consists of 128 output lengths that give different hashes
	SKEIN1024_8 Codec = 0xb361
	// multihash
	SKEIN1024_16 Codec = 0xb362
	// multihash
	SKEIN1024_24 Codec = 0xb363
	// multihash
	SKEIN1024_32 Codec = 0xb364
	// multihash
	SKEIN1024_40 Codec = 0xb365
	// multihash
	SKEIN1024_48 Codec = 0xb366
	// multihash
	SKEIN1024_56 Codec = 0xb367
	// multihash
	SKEIN1024_64 Codec = 0xb368
	// multihash
	SKEIN1024_72 Codec = 0xb369
	// multihash
	SKEIN1024_80 Codec = 0xb36a
	// multihash
	SKEIN1024_88 Codec = 0xb36b
	// multihash
	SKEIN1024_96 Codec = 0xb36c
	// multihash
	SKEIN1024_104 Codec = 0xb36d
	// multihash
	SKEIN1024_112 Codec = 0xb36e
	// multihash
	SKEIN1024_120 Codec = 0xb36f
	// multihash
	SKEIN1024_128 Codec = 0xb370
	// multihash
	SKEIN1024_136 Codec = 0xb371
	// multihash
	SKEIN1024_144 Codec = 0xb372
	// multihash
	SKEIN1024_152 Codec = 0xb373
	// multihash
	SKEIN1024_160 Codec = 0xb374
	// multihash
	SKEIN1024_168 Codec = 0xb375
	// multihash
	SKEIN1024_176 Codec = 0xb376
	// multihash
	SKEIN1024_184 Codec = 0xb377
	// multihash
	SKEIN1024_192 Codec = 0xb378
	// multihash
	SKEIN1024_200 Codec = 0xb379
	// multihash
	SKEIN1024_208 Codec = 0xb37a
	// multihash
	SKEIN1024_216 Codec = 0xb37b
	// multihash
	SKEIN1024_224 Codec = 0xb37c
	// multihash
	SKEIN1024_232 Codec = 0xb37d
	// multihash
	SKEIN1024_240 Codec = 0xb37e
	// multihash
	SKEIN1024_248 Codec = 0xb37f
	// multihash
	SKEIN1024_256 Codec = 0xb380
	// multihash
	SKEIN1024_264 Codec = 0xb381
	// multihash
	SKEIN1024_272 Codec = 0xb382
	// multihash
	SKEIN1024_280 Codec = 0xb383
	// multihash
	SKEIN1024_288 Codec = 0xb384
	// multihash
	SKEIN1024_296 Codec = 0xb385
	// multihash
	SKEIN1024_304 Codec = 0xb386
	// multihash
	SKEIN1024_312 Codec = 0xb387
	// multihash
	SKEIN1024_320 Codec = 0xb388
	// multihash
	SKEIN1024_328 Codec = 0xb389
	// multihash
	SKEIN1024_336 Codec = 0xb38a
	// multihash
	SKEIN1024_344 Codec = 0xb38b
	// multihash
	SKEIN1024_352 Codec = 0xb38c
	// multihash
	SKEIN1024_360 Codec = 0xb38d
	// multihash
	SKEIN1024_368 Codec = 0xb38e
	// multihash
	SKEIN1024_376 Codec = 0xb38f
	// multihash
	SKEIN1024_384 Codec = 0xb390
	// multihash
	SKEIN1024_392 Codec = 0xb391
	// multihash
	SKEIN1024_400 Codec = 0xb392
	// multihash
	SKEIN1024_408 Codec = 0xb393
	// multihash
	SKEIN1024_416 Codec = 0xb394
	// multihash
	SKEIN1024_424 Codec = 0xb395
	// multihash
	SKEIN1024_432 Codec = 0xb396
	// multihash
	SKEIN1024_440 Codec = 0xb397
	// multihash
	SKEIN1024_448 Codec = 0xb398
	// multihash
	SKEIN1024_456 Codec = 0xb399
	// multihash
	SKEIN1024_464 Codec = 0xb39a
	// multihash
	SKEIN1024_472 Codec = 0xb39b
	// multihash
	SKEIN1024_480 Codec = 0xb39c
	// multihash
	SKEIN1024_488 Codec = 0xb39d
	// multihash
	SKEIN1024_496 Codec = 0xb39e
	// multihash
	SKEIN1024_504 Codec = 0xb39f
	// multihash
	SKEIN1024_512 Codec = 0xb3a0
	// multihash
	SKEIN1024_520 Codec = 0xb3a1
	// multihash
	SKEIN1024_528 Codec = 0xb3a2
	// multihash
	SKEIN1024_536 Codec = 0xb3a3
	// multihash
	SKEIN1024_544 Codec = 0xb3a4
	// multihash
	SKEIN1024_552 Codec = 0xb3a5
	// multihash
	SKEIN1024_560 Codec = 0xb3a6
	// multihash
	SKEIN1024_568 Codec = 0xb3a7
	// multihash
	SKEIN1024_576 Codec = 0xb3a8
	// multihash
	SKEIN1024_584 Codec = 0xb3a9
	// multihash
	SKEIN1024_592 Codec = 0xb3aa
	// multihash
	SKEIN1024_600 Codec = 0xb3ab
	// multihash
	SKEIN1024_608 Codec = 0xb3ac
	// multihash
	SKEIN1024_616 Codec = 0xb3ad
	// multihash
	SKEIN1024_624 Codec = 0xb3ae
	// multihash
	SKEIN1024_632 Codec = 0xb3af
	// multihash
	SKEIN1024_640 Codec = 0xb3b0
	// multihash
	SKEIN1024_648 Codec = 0xb3b1
	// multihash
	SKEIN1024_656 Codec = 0xb3b2
	// multihash
	SKEIN1024_664 Codec = 0xb3b3
	// multihash
	SKEIN1024_672 Codec = 0xb3b4
	// multihash
	SKEIN1024_680 Codec = 0xb3b5
	// multihash
	SKEIN1024_688 Codec = 0xb3b6
	// multihash
	SKEIN1024_696 Codec = 0xb3b7
	// multihash
	SKEIN1024_704 Codec = 0xb3b8
	// multihash
	SKEIN1024_712 Codec = 0xb3b9
	// multihash
	SKEIN1024_720 Codec = 0xb3ba
	// multihash
	SKEIN1024_728 Codec = 0xb3bb
	// multihash
	SKEIN1024_736 Codec = 0xb3bc
	// multihash
	SKEIN1024_744 Codec = 0xb3bd
	// multihash
	SKEIN1024_752 Codec = 0xb3be
	// multihash
	SKEIN1024_760 Codec = 0xb3bf
	// multihash
	SKEIN1024_768 Codec = 0xb3c0
	// multihash
	SKEIN1024_776 Codec = 0xb3c1
	// multihash
	SKEIN1024_784 Codec = 0xb3c2
	// multihash
	SKEIN1024_792 Codec = 0xb3c3
	// multihash
	SKEIN1024_800 Codec = 0xb3c4
	// multihash
	SKEIN1024_808 Codec = 0xb3c5
	// multihash
	SKEIN1024_816 Codec = 0xb3c6
	// multihash
	SKEIN1024_824 Codec = 0xb3c7
	// multihash
	SKEIN1024_832 Codec = 0xb3c8
	// multihash
	SKEIN1024_840 Codec = 0xb3c9
	// multihash
	SKEIN1024_848 Codec = 0xb3ca
	// multihash
	SKEIN1024_856 Codec = 0xb3cb
	// multihash
	SKEIN1024_864 Codec = 0xb3cc
	// multihash
	SKEIN1024_872 Codec = 0xb3cd
	// multihash
	SKEIN1024_880 Codec = 0xb3ce
	// multihash
	SKEIN1024_888 Codec = 0xb3cf
	// multihash
	SKEIN1024_896 Codec = 0xb3d0
	// multihash
	SKEIN1024_904 Codec = 0xb3d1
	// multihash
	SKEIN1024_912 Codec = 0xb3d2
	// multihash
	SKEIN1024_920 Codec = 0xb3d3
	// multihash
	SKEIN1024_928 Codec = 0xb3d4
	// multihash
	SKEIN1024_936 Codec = 0xb3d5
	// multihash
	SKEIN1024_944 Codec = 0xb3d6
	// multihash
	SKEIN1024_952 Codec = 0xb3d7
	// multihash
	SKEIN1024_960 Codec = 0xb3d8
	// multihash
	SKEIN1024_968 Codec = 0xb3d9
	// multihash
	SKEIN1024_976 Codec = 0xb3da
	// multihash
	SKEIN1024_984 Codec = 0xb3db
	// multihash
	SKEIN1024_992 Codec = 0xb3dc
	// multihash
	SKEIN1024_1000 Codec = 0xb3dd
	// multihash
	SKEIN1024_1008 Codec = 0xb3de
	// multihash
	SKEIN1024_1016 Codec = 0xb3df
	// multihash
	SKEIN1024_1024 Codec = 0xb3e0
	// multihash: Poseidon using BLS12-381 and arity of 2 with Filecoin parameters
	POSEIDON_BLS12_381_A2_FC1 Codec = 0xb401
	// multihash: Poseidon using BLS12-381 and arity of 2 with Filecoin parameters - high-security variant
	POSEIDON_BLS12_381_A2_FC1_SC Codec = 0xb402
	// zeroxcert: 0xcert Asset Imprint (root hash)
	ZEROXCERT_IMPRINT_256 Codec = 0xce11
	// filecoin: Filecoin piece or sector data commitment merkle node/root (CommP & CommD)
	FIL_COMMITMENT_UNSEALED Codec = 0xf101
	// filecoin: Filecoin sector data commitment merkle node/root - sealed and replicated (CommR)
	FIL_COMMITMENT_SEALED Codec = 0xf102
	// holochain: Holochain v0 address    + 8 R-S (63 x Base-32)
	HOLOCHAIN_ADR_V0 Codec = 0x807124
	// holochain: Holochain v1 address    + 8 R-S (63 x Base-32)
	HOLOCHAIN_ADR_V1 Codec = 0x817124
	// holochain: Holochain v0 public key + 8 R-S (63 x Base-32)
	HOLOCHAIN_KEY_V0 Codec = 0x947124
	// holochain: Holochain v1 public key + 8 R-S (63 x Base-32)
	HOLOCHAIN_KEY_V1 Codec = 0x957124
	// holochain: Holochain v0 signature  + 8 R-S (63 x Base-32)
	HOLOCHAIN_SIG_V0 Codec = 0xa27124
	// holochain: Holochain v1 signature  + 8 R-S (63 x Base-32)
	HOLOCHAIN_SIG_V1 Codec = 0xa37124
)
