// Code generated by go generate; DO NOT EDIT.
package multicodec

// Codec serves the purpose of type safety when passing around codecs
type Codec uint64

// These are multicodec-packed content types.
const (
	// multihash: raw binary
	Identity Codec = 0x00
	// ipld: CIDv1
	Cidv1 Codec = 0x01
	// ipld: CIDv2
	Cidv2 Codec = 0x02
	// ipld: CIDv3
	Cidv3 Codec = 0x03
	// multiaddr
	Ip4 Codec = 0x04
	// multiaddr
	Tcp Codec = 0x06
	// multihash
	Sha1 Codec = 0x11
	// multihash
	Sha2256 Codec = 0x12
	// multihash
	Sha2512 Codec = 0x13
	// multihash
	Sha3512 Codec = 0x14
	// multihash
	Sha3384 Codec = 0x15
	// multihash
	Sha3256 Codec = 0x16
	// multihash
	Sha3224 Codec = 0x17
	// multihash
	Shake128 Codec = 0x18
	// multihash
	Shake256 Codec = 0x19
	// multihash: keccak has variable output length. The number specifies the core length
	Keccak224 Codec = 0x1a
	// multihash
	Keccak256 Codec = 0x1b
	// multihash
	Keccak384 Codec = 0x1c
	// multihash
	Keccak512 Codec = 0x1d
	// multihash: BLAKE3 has a default 32 byte output length. The maximum length is (2^64)-1 bytes.
	Blake3 Codec = 0x1e
	// multiaddr
	Dccp Codec = 0x21
	// multihash
	Murmur3128 Codec = 0x22
	// multihash
	Murmur332 Codec = 0x23
	// multiaddr
	Ip6 Codec = 0x29
	// multiaddr
	Ip6zone Codec = 0x2a
	// namespace: Namespace for string paths. Corresponds to `/` in ASCII.
	Path Codec = 0x2f
	// multiformat
	Multicodec Codec = 0x30
	// multiformat
	Multihash Codec = 0x31
	// multiformat
	Multiaddr Codec = 0x32
	// multiformat
	Multibase Codec = 0x33
	// multiaddr
	Dns Codec = 0x35
	// multiaddr
	Dns4 Codec = 0x36
	// multiaddr
	Dns6 Codec = 0x37
	// multiaddr
	Dnsaddr Codec = 0x38
	// serialization: Protocol Buffers
	Protobuf Codec = 0x50
	// serialization: CBOR
	Cbor Codec = 0x51
	// ipld: raw binary
	Raw Codec = 0x55
	// multihash
	DblSha2256 Codec = 0x56
	// serialization: recursive length prefix
	Rlp Codec = 0x60
	// serialization: bencode
	Bencode Codec = 0x63
	// ipld: MerkleDAG protobuf
	DagPb Codec = 0x70
	// ipld: MerkleDAG cbor
	DagCbor Codec = 0x71
	// ipld: Libp2p Public Key
	Libp2pKey Codec = 0x72
	// ipld: Raw Git object
	GitRaw Codec = 0x78
	// ipld: Torrent file info field (bencoded)
	TorrentInfo Codec = 0x7b
	// ipld: Torrent file (bencoded)
	TorrentFile Codec = 0x7c
	// ipld: Leofcoin Block
	LeofcoinBlock Codec = 0x81
	// ipld: Leofcoin Transaction
	LeofcoinTx Codec = 0x82
	// ipld: Leofcoin Peer Reputation
	LeofcoinPr Codec = 0x83
	// multiaddr
	Sctp Codec = 0x84
	// ipld: MerkleDAG JOSE
	DagJose Codec = 0x85
	// ipld: MerkleDAG COSE
	DagCose Codec = 0x86
	// ipld: Ethereum Block (RLP)
	EthBlock Codec = 0x90
	// ipld: Ethereum Block List (RLP)
	EthBlockList Codec = 0x91
	// ipld: Ethereum Transaction Trie (Eth-Trie)
	EthTxTrie Codec = 0x92
	// ipld: Ethereum Transaction (RLP)
	EthTx Codec = 0x93
	// ipld: Ethereum Transaction Receipt Trie (Eth-Trie)
	EthTxReceiptTrie Codec = 0x94
	// ipld: Ethereum Transaction Receipt (RLP)
	EthTxReceipt Codec = 0x95
	// ipld: Ethereum State Trie (Eth-Secure-Trie)
	EthStateTrie Codec = 0x96
	// ipld: Ethereum Account Snapshot (RLP)
	EthAccountSnapshot Codec = 0x97
	// ipld: Ethereum Contract Storage Trie (Eth-Secure-Trie)
	EthStorageTrie Codec = 0x98
	// ipld: Bitcoin Block
	BitcoinBlock Codec = 0xb0
	// ipld: Bitcoin Tx
	BitcoinTx Codec = 0xb1
	// ipld: Bitcoin Witness Commitment
	BitcoinWitnessCommitment Codec = 0xb2
	// ipld: Zcash Block
	ZcashBlock Codec = 0xc0
	// ipld: Zcash Tx
	ZcashTx Codec = 0xc1
	// namespace: Ceramic Document Id
	Docid Codec = 0xce
	// ipld: Stellar Block
	StellarBlock Codec = 0xd0
	// ipld: Stellar Tx
	StellarTx Codec = 0xd1
	// multihash
	Md4 Codec = 0xd4
	// multihash
	Md5 Codec = 0xd5
	// multihash: Binary Merkle Tree Hash
	Bmt Codec = 0xd6
	// ipld: Decred Block
	DecredBlock Codec = 0xe0
	// ipld: Decred Tx
	DecredTx Codec = 0xe1
	// namespace: IPLD path
	IpldNs Codec = 0xe2
	// namespace: IPFS path
	IpfsNs Codec = 0xe3
	// namespace: Swarm path
	SwarmNs Codec = 0xe4
	// namespace: IPNS path
	IpnsNs Codec = 0xe5
	// namespace: ZeroNet site address
	Zeronet Codec = 0xe6
	// key: Secp256k1 public key
	Secp256k1Pub Codec = 0xe7
	// key: BLS12-381 public key in the G1 field
	Bls12381G1Pub Codec = 0xea
	// key: BLS12-381 public key in the G2 field
	Bls12381G2Pub Codec = 0xeb
	// key: Curve25519 public key
	X25519Pub Codec = 0xec
	// key: Ed25519 public key
	Ed25519Pub Codec = 0xed
	// key: BLS12-381 concatenated public keys in both the G1 and G2 fields
	Bls12381G1g2Pub Codec = 0xee
	// ipld: Dash Block
	DashBlock Codec = 0xf0
	// ipld: Dash Tx
	DashTx Codec = 0xf1
	// ipld: Swarm Manifest
	SwarmManifest Codec = 0xfa
	// ipld: Swarm Feed
	SwarmFeed Codec = 0xfb
	// multiaddr
	Udp Codec = 0x0111
	// multiaddr
	P2pWebrtcStar Codec = 0x0113
	// multiaddr
	P2pWebrtcDirect Codec = 0x0114
	// multiaddr
	P2pStardust Codec = 0x0115
	// multiaddr
	P2pCircuit Codec = 0x0122
	// ipld: MerkleDAG json
	DagJson Codec = 0x0129
	// multiaddr
	Udt Codec = 0x012d
	// multiaddr
	Utp Codec = 0x012e
	// multiaddr
	Unix Codec = 0x0190
	// multiaddr: libp2p
	P2p Codec = 0x01a5
	// Deprecated: multiaddr: libp2p (deprecated)
	Ipfs Codec = 0x01a5
	// multiaddr
	Https Codec = 0x01bb
	// multiaddr
	Onion Codec = 0x01bc
	// multiaddr
	Onion3 Codec = 0x01bd
	// multiaddr: I2P base64 (raw public key)
	Garlic64 Codec = 0x01be
	// multiaddr: I2P base32 (hashed public key or encoded public key/checksum+optional secret)
	Garlic32 Codec = 0x01bf
	// multiaddr
	Tls Codec = 0x01c0
	// multiaddr
	Quic Codec = 0x01cc
	// multiaddr
	Ws Codec = 0x01dd
	// multiaddr
	Wss Codec = 0x01de
	// multiaddr
	P2pWebsocketStar Codec = 0x01df
	// multiaddr
	Http Codec = 0x01e0
	// serialization: JSON (UTF-8-encoded)
	Json Codec = 0x0200
	// serialization: MessagePack
	Messagepack Codec = 0x0201
	// libp2p: libp2p peer record type
	Libp2pPeerRecord Codec = 0x0301
	// multihash: SHA2-256 with the two most significant bits from the last byte zeroed (as via a mask with 0b00111111) - used for proving trees as in Filecoin
	Sha2256Trunc254Padded Codec = 0x1012
	// multihash
	Ripemd128 Codec = 0x1052
	// multihash
	Ripemd160 Codec = 0x1053
	// multihash
	Ripemd256 Codec = 0x1054
	// multihash
	Ripemd320 Codec = 0x1055
	// multihash
	X11 Codec = 0x1100
	// key: P-256 public Key
	P256Pub Codec = 0x1200
	// key: P-384 public Key
	P384Pub Codec = 0x1201
	// key: P-521 public Key
	P521Pub Codec = 0x1202
	// key: Ed448 public Key
	Ed448Pub Codec = 0x1203
	// key: X448 public Key
	X448Pub Codec = 0x1204
	// key: Ed25519 private key
	Ed25519Priv Codec = 0x1300
	// multihash: KangarooTwelve is an extendable-output hash function based on Keccak-p
	Kangarootwelve Codec = 0x1d01
	// multihash
	Sm3256 Codec = 0x534d
	// multihash: Blake2b consists of 64 output lengths that give different hashes
	Blake2b8 Codec = 0xb201
	// multihash
	Blake2b16 Codec = 0xb202
	// multihash
	Blake2b24 Codec = 0xb203
	// multihash
	Blake2b32 Codec = 0xb204
	// multihash
	Blake2b40 Codec = 0xb205
	// multihash
	Blake2b48 Codec = 0xb206
	// multihash
	Blake2b56 Codec = 0xb207
	// multihash
	Blake2b64 Codec = 0xb208
	// multihash
	Blake2b72 Codec = 0xb209
	// multihash
	Blake2b80 Codec = 0xb20a
	// multihash
	Blake2b88 Codec = 0xb20b
	// multihash
	Blake2b96 Codec = 0xb20c
	// multihash
	Blake2b104 Codec = 0xb20d
	// multihash
	Blake2b112 Codec = 0xb20e
	// multihash
	Blake2b120 Codec = 0xb20f
	// multihash
	Blake2b128 Codec = 0xb210
	// multihash
	Blake2b136 Codec = 0xb211
	// multihash
	Blake2b144 Codec = 0xb212
	// multihash
	Blake2b152 Codec = 0xb213
	// multihash
	Blake2b160 Codec = 0xb214
	// multihash
	Blake2b168 Codec = 0xb215
	// multihash
	Blake2b176 Codec = 0xb216
	// multihash
	Blake2b184 Codec = 0xb217
	// multihash
	Blake2b192 Codec = 0xb218
	// multihash
	Blake2b200 Codec = 0xb219
	// multihash
	Blake2b208 Codec = 0xb21a
	// multihash
	Blake2b216 Codec = 0xb21b
	// multihash
	Blake2b224 Codec = 0xb21c
	// multihash
	Blake2b232 Codec = 0xb21d
	// multihash
	Blake2b240 Codec = 0xb21e
	// multihash
	Blake2b248 Codec = 0xb21f
	// multihash
	Blake2b256 Codec = 0xb220
	// multihash
	Blake2b264 Codec = 0xb221
	// multihash
	Blake2b272 Codec = 0xb222
	// multihash
	Blake2b280 Codec = 0xb223
	// multihash
	Blake2b288 Codec = 0xb224
	// multihash
	Blake2b296 Codec = 0xb225
	// multihash
	Blake2b304 Codec = 0xb226
	// multihash
	Blake2b312 Codec = 0xb227
	// multihash
	Blake2b320 Codec = 0xb228
	// multihash
	Blake2b328 Codec = 0xb229
	// multihash
	Blake2b336 Codec = 0xb22a
	// multihash
	Blake2b344 Codec = 0xb22b
	// multihash
	Blake2b352 Codec = 0xb22c
	// multihash
	Blake2b360 Codec = 0xb22d
	// multihash
	Blake2b368 Codec = 0xb22e
	// multihash
	Blake2b376 Codec = 0xb22f
	// multihash
	Blake2b384 Codec = 0xb230
	// multihash
	Blake2b392 Codec = 0xb231
	// multihash
	Blake2b400 Codec = 0xb232
	// multihash
	Blake2b408 Codec = 0xb233
	// multihash
	Blake2b416 Codec = 0xb234
	// multihash
	Blake2b424 Codec = 0xb235
	// multihash
	Blake2b432 Codec = 0xb236
	// multihash
	Blake2b440 Codec = 0xb237
	// multihash
	Blake2b448 Codec = 0xb238
	// multihash
	Blake2b456 Codec = 0xb239
	// multihash
	Blake2b464 Codec = 0xb23a
	// multihash
	Blake2b472 Codec = 0xb23b
	// multihash
	Blake2b480 Codec = 0xb23c
	// multihash
	Blake2b488 Codec = 0xb23d
	// multihash
	Blake2b496 Codec = 0xb23e
	// multihash
	Blake2b504 Codec = 0xb23f
	// multihash
	Blake2b512 Codec = 0xb240
	// multihash: Blake2s consists of 32 output lengths that give different hashes
	Blake2s8 Codec = 0xb241
	// multihash
	Blake2s16 Codec = 0xb242
	// multihash
	Blake2s24 Codec = 0xb243
	// multihash
	Blake2s32 Codec = 0xb244
	// multihash
	Blake2s40 Codec = 0xb245
	// multihash
	Blake2s48 Codec = 0xb246
	// multihash
	Blake2s56 Codec = 0xb247
	// multihash
	Blake2s64 Codec = 0xb248
	// multihash
	Blake2s72 Codec = 0xb249
	// multihash
	Blake2s80 Codec = 0xb24a
	// multihash
	Blake2s88 Codec = 0xb24b
	// multihash
	Blake2s96 Codec = 0xb24c
	// multihash
	Blake2s104 Codec = 0xb24d
	// multihash
	Blake2s112 Codec = 0xb24e
	// multihash
	Blake2s120 Codec = 0xb24f
	// multihash
	Blake2s128 Codec = 0xb250
	// multihash
	Blake2s136 Codec = 0xb251
	// multihash
	Blake2s144 Codec = 0xb252
	// multihash
	Blake2s152 Codec = 0xb253
	// multihash
	Blake2s160 Codec = 0xb254
	// multihash
	Blake2s168 Codec = 0xb255
	// multihash
	Blake2s176 Codec = 0xb256
	// multihash
	Blake2s184 Codec = 0xb257
	// multihash
	Blake2s192 Codec = 0xb258
	// multihash
	Blake2s200 Codec = 0xb259
	// multihash
	Blake2s208 Codec = 0xb25a
	// multihash
	Blake2s216 Codec = 0xb25b
	// multihash
	Blake2s224 Codec = 0xb25c
	// multihash
	Blake2s232 Codec = 0xb25d
	// multihash
	Blake2s240 Codec = 0xb25e
	// multihash
	Blake2s248 Codec = 0xb25f
	// multihash
	Blake2s256 Codec = 0xb260
	// multihash: Skein256 consists of 32 output lengths that give different hashes
	Skein2568 Codec = 0xb301
	// multihash
	Skein25616 Codec = 0xb302
	// multihash
	Skein25624 Codec = 0xb303
	// multihash
	Skein25632 Codec = 0xb304
	// multihash
	Skein25640 Codec = 0xb305
	// multihash
	Skein25648 Codec = 0xb306
	// multihash
	Skein25656 Codec = 0xb307
	// multihash
	Skein25664 Codec = 0xb308
	// multihash
	Skein25672 Codec = 0xb309
	// multihash
	Skein25680 Codec = 0xb30a
	// multihash
	Skein25688 Codec = 0xb30b
	// multihash
	Skein25696 Codec = 0xb30c
	// multihash
	Skein256104 Codec = 0xb30d
	// multihash
	Skein256112 Codec = 0xb30e
	// multihash
	Skein256120 Codec = 0xb30f
	// multihash
	Skein256128 Codec = 0xb310
	// multihash
	Skein256136 Codec = 0xb311
	// multihash
	Skein256144 Codec = 0xb312
	// multihash
	Skein256152 Codec = 0xb313
	// multihash
	Skein256160 Codec = 0xb314
	// multihash
	Skein256168 Codec = 0xb315
	// multihash
	Skein256176 Codec = 0xb316
	// multihash
	Skein256184 Codec = 0xb317
	// multihash
	Skein256192 Codec = 0xb318
	// multihash
	Skein256200 Codec = 0xb319
	// multihash
	Skein256208 Codec = 0xb31a
	// multihash
	Skein256216 Codec = 0xb31b
	// multihash
	Skein256224 Codec = 0xb31c
	// multihash
	Skein256232 Codec = 0xb31d
	// multihash
	Skein256240 Codec = 0xb31e
	// multihash
	Skein256248 Codec = 0xb31f
	// multihash
	Skein256256 Codec = 0xb320
	// multihash: Skein512 consists of 64 output lengths that give different hashes
	Skein5128 Codec = 0xb321
	// multihash
	Skein51216 Codec = 0xb322
	// multihash
	Skein51224 Codec = 0xb323
	// multihash
	Skein51232 Codec = 0xb324
	// multihash
	Skein51240 Codec = 0xb325
	// multihash
	Skein51248 Codec = 0xb326
	// multihash
	Skein51256 Codec = 0xb327
	// multihash
	Skein51264 Codec = 0xb328
	// multihash
	Skein51272 Codec = 0xb329
	// multihash
	Skein51280 Codec = 0xb32a
	// multihash
	Skein51288 Codec = 0xb32b
	// multihash
	Skein51296 Codec = 0xb32c
	// multihash
	Skein512104 Codec = 0xb32d
	// multihash
	Skein512112 Codec = 0xb32e
	// multihash
	Skein512120 Codec = 0xb32f
	// multihash
	Skein512128 Codec = 0xb330
	// multihash
	Skein512136 Codec = 0xb331
	// multihash
	Skein512144 Codec = 0xb332
	// multihash
	Skein512152 Codec = 0xb333
	// multihash
	Skein512160 Codec = 0xb334
	// multihash
	Skein512168 Codec = 0xb335
	// multihash
	Skein512176 Codec = 0xb336
	// multihash
	Skein512184 Codec = 0xb337
	// multihash
	Skein512192 Codec = 0xb338
	// multihash
	Skein512200 Codec = 0xb339
	// multihash
	Skein512208 Codec = 0xb33a
	// multihash
	Skein512216 Codec = 0xb33b
	// multihash
	Skein512224 Codec = 0xb33c
	// multihash
	Skein512232 Codec = 0xb33d
	// multihash
	Skein512240 Codec = 0xb33e
	// multihash
	Skein512248 Codec = 0xb33f
	// multihash
	Skein512256 Codec = 0xb340
	// multihash
	Skein512264 Codec = 0xb341
	// multihash
	Skein512272 Codec = 0xb342
	// multihash
	Skein512280 Codec = 0xb343
	// multihash
	Skein512288 Codec = 0xb344
	// multihash
	Skein512296 Codec = 0xb345
	// multihash
	Skein512304 Codec = 0xb346
	// multihash
	Skein512312 Codec = 0xb347
	// multihash
	Skein512320 Codec = 0xb348
	// multihash
	Skein512328 Codec = 0xb349
	// multihash
	Skein512336 Codec = 0xb34a
	// multihash
	Skein512344 Codec = 0xb34b
	// multihash
	Skein512352 Codec = 0xb34c
	// multihash
	Skein512360 Codec = 0xb34d
	// multihash
	Skein512368 Codec = 0xb34e
	// multihash
	Skein512376 Codec = 0xb34f
	// multihash
	Skein512384 Codec = 0xb350
	// multihash
	Skein512392 Codec = 0xb351
	// multihash
	Skein512400 Codec = 0xb352
	// multihash
	Skein512408 Codec = 0xb353
	// multihash
	Skein512416 Codec = 0xb354
	// multihash
	Skein512424 Codec = 0xb355
	// multihash
	Skein512432 Codec = 0xb356
	// multihash
	Skein512440 Codec = 0xb357
	// multihash
	Skein512448 Codec = 0xb358
	// multihash
	Skein512456 Codec = 0xb359
	// multihash
	Skein512464 Codec = 0xb35a
	// multihash
	Skein512472 Codec = 0xb35b
	// multihash
	Skein512480 Codec = 0xb35c
	// multihash
	Skein512488 Codec = 0xb35d
	// multihash
	Skein512496 Codec = 0xb35e
	// multihash
	Skein512504 Codec = 0xb35f
	// multihash
	Skein512512 Codec = 0xb360
	// multihash: Skein1024 consists of 128 output lengths that give different hashes
	Skein10248 Codec = 0xb361
	// multihash
	Skein102416 Codec = 0xb362
	// multihash
	Skein102424 Codec = 0xb363
	// multihash
	Skein102432 Codec = 0xb364
	// multihash
	Skein102440 Codec = 0xb365
	// multihash
	Skein102448 Codec = 0xb366
	// multihash
	Skein102456 Codec = 0xb367
	// multihash
	Skein102464 Codec = 0xb368
	// multihash
	Skein102472 Codec = 0xb369
	// multihash
	Skein102480 Codec = 0xb36a
	// multihash
	Skein102488 Codec = 0xb36b
	// multihash
	Skein102496 Codec = 0xb36c
	// multihash
	Skein1024104 Codec = 0xb36d
	// multihash
	Skein1024112 Codec = 0xb36e
	// multihash
	Skein1024120 Codec = 0xb36f
	// multihash
	Skein1024128 Codec = 0xb370
	// multihash
	Skein1024136 Codec = 0xb371
	// multihash
	Skein1024144 Codec = 0xb372
	// multihash
	Skein1024152 Codec = 0xb373
	// multihash
	Skein1024160 Codec = 0xb374
	// multihash
	Skein1024168 Codec = 0xb375
	// multihash
	Skein1024176 Codec = 0xb376
	// multihash
	Skein1024184 Codec = 0xb377
	// multihash
	Skein1024192 Codec = 0xb378
	// multihash
	Skein1024200 Codec = 0xb379
	// multihash
	Skein1024208 Codec = 0xb37a
	// multihash
	Skein1024216 Codec = 0xb37b
	// multihash
	Skein1024224 Codec = 0xb37c
	// multihash
	Skein1024232 Codec = 0xb37d
	// multihash
	Skein1024240 Codec = 0xb37e
	// multihash
	Skein1024248 Codec = 0xb37f
	// multihash
	Skein1024256 Codec = 0xb380
	// multihash
	Skein1024264 Codec = 0xb381
	// multihash
	Skein1024272 Codec = 0xb382
	// multihash
	Skein1024280 Codec = 0xb383
	// multihash
	Skein1024288 Codec = 0xb384
	// multihash
	Skein1024296 Codec = 0xb385
	// multihash
	Skein1024304 Codec = 0xb386
	// multihash
	Skein1024312 Codec = 0xb387
	// multihash
	Skein1024320 Codec = 0xb388
	// multihash
	Skein1024328 Codec = 0xb389
	// multihash
	Skein1024336 Codec = 0xb38a
	// multihash
	Skein1024344 Codec = 0xb38b
	// multihash
	Skein1024352 Codec = 0xb38c
	// multihash
	Skein1024360 Codec = 0xb38d
	// multihash
	Skein1024368 Codec = 0xb38e
	// multihash
	Skein1024376 Codec = 0xb38f
	// multihash
	Skein1024384 Codec = 0xb390
	// multihash
	Skein1024392 Codec = 0xb391
	// multihash
	Skein1024400 Codec = 0xb392
	// multihash
	Skein1024408 Codec = 0xb393
	// multihash
	Skein1024416 Codec = 0xb394
	// multihash
	Skein1024424 Codec = 0xb395
	// multihash
	Skein1024432 Codec = 0xb396
	// multihash
	Skein1024440 Codec = 0xb397
	// multihash
	Skein1024448 Codec = 0xb398
	// multihash
	Skein1024456 Codec = 0xb399
	// multihash
	Skein1024464 Codec = 0xb39a
	// multihash
	Skein1024472 Codec = 0xb39b
	// multihash
	Skein1024480 Codec = 0xb39c
	// multihash
	Skein1024488 Codec = 0xb39d
	// multihash
	Skein1024496 Codec = 0xb39e
	// multihash
	Skein1024504 Codec = 0xb39f
	// multihash
	Skein1024512 Codec = 0xb3a0
	// multihash
	Skein1024520 Codec = 0xb3a1
	// multihash
	Skein1024528 Codec = 0xb3a2
	// multihash
	Skein1024536 Codec = 0xb3a3
	// multihash
	Skein1024544 Codec = 0xb3a4
	// multihash
	Skein1024552 Codec = 0xb3a5
	// multihash
	Skein1024560 Codec = 0xb3a6
	// multihash
	Skein1024568 Codec = 0xb3a7
	// multihash
	Skein1024576 Codec = 0xb3a8
	// multihash
	Skein1024584 Codec = 0xb3a9
	// multihash
	Skein1024592 Codec = 0xb3aa
	// multihash
	Skein1024600 Codec = 0xb3ab
	// multihash
	Skein1024608 Codec = 0xb3ac
	// multihash
	Skein1024616 Codec = 0xb3ad
	// multihash
	Skein1024624 Codec = 0xb3ae
	// multihash
	Skein1024632 Codec = 0xb3af
	// multihash
	Skein1024640 Codec = 0xb3b0
	// multihash
	Skein1024648 Codec = 0xb3b1
	// multihash
	Skein1024656 Codec = 0xb3b2
	// multihash
	Skein1024664 Codec = 0xb3b3
	// multihash
	Skein1024672 Codec = 0xb3b4
	// multihash
	Skein1024680 Codec = 0xb3b5
	// multihash
	Skein1024688 Codec = 0xb3b6
	// multihash
	Skein1024696 Codec = 0xb3b7
	// multihash
	Skein1024704 Codec = 0xb3b8
	// multihash
	Skein1024712 Codec = 0xb3b9
	// multihash
	Skein1024720 Codec = 0xb3ba
	// multihash
	Skein1024728 Codec = 0xb3bb
	// multihash
	Skein1024736 Codec = 0xb3bc
	// multihash
	Skein1024744 Codec = 0xb3bd
	// multihash
	Skein1024752 Codec = 0xb3be
	// multihash
	Skein1024760 Codec = 0xb3bf
	// multihash
	Skein1024768 Codec = 0xb3c0
	// multihash
	Skein1024776 Codec = 0xb3c1
	// multihash
	Skein1024784 Codec = 0xb3c2
	// multihash
	Skein1024792 Codec = 0xb3c3
	// multihash
	Skein1024800 Codec = 0xb3c4
	// multihash
	Skein1024808 Codec = 0xb3c5
	// multihash
	Skein1024816 Codec = 0xb3c6
	// multihash
	Skein1024824 Codec = 0xb3c7
	// multihash
	Skein1024832 Codec = 0xb3c8
	// multihash
	Skein1024840 Codec = 0xb3c9
	// multihash
	Skein1024848 Codec = 0xb3ca
	// multihash
	Skein1024856 Codec = 0xb3cb
	// multihash
	Skein1024864 Codec = 0xb3cc
	// multihash
	Skein1024872 Codec = 0xb3cd
	// multihash
	Skein1024880 Codec = 0xb3ce
	// multihash
	Skein1024888 Codec = 0xb3cf
	// multihash
	Skein1024896 Codec = 0xb3d0
	// multihash
	Skein1024904 Codec = 0xb3d1
	// multihash
	Skein1024912 Codec = 0xb3d2
	// multihash
	Skein1024920 Codec = 0xb3d3
	// multihash
	Skein1024928 Codec = 0xb3d4
	// multihash
	Skein1024936 Codec = 0xb3d5
	// multihash
	Skein1024944 Codec = 0xb3d6
	// multihash
	Skein1024952 Codec = 0xb3d7
	// multihash
	Skein1024960 Codec = 0xb3d8
	// multihash
	Skein1024968 Codec = 0xb3d9
	// multihash
	Skein1024976 Codec = 0xb3da
	// multihash
	Skein1024984 Codec = 0xb3db
	// multihash
	Skein1024992 Codec = 0xb3dc
	// multihash
	Skein10241000 Codec = 0xb3dd
	// multihash
	Skein10241008 Codec = 0xb3de
	// multihash
	Skein10241016 Codec = 0xb3df
	// multihash
	Skein10241024 Codec = 0xb3e0
	// multihash: Poseidon using BLS12-381 and arity of 2 with Filecoin parameters
	PoseidonBls12381A2Fc1 Codec = 0xb401
	// multihash: Poseidon using BLS12-381 and arity of 2 with Filecoin parameters - high-security variant
	PoseidonBls12381A2Fc1Sc Codec = 0xb402
	// zeroxcert: 0xcert Asset Imprint (root hash)
	ZeroxcertImprint256 Codec = 0xce11
	// filecoin: Filecoin piece or sector data commitment merkle node/root (CommP & CommD)
	FilCommitmentUnsealed Codec = 0xf101
	// filecoin: Filecoin sector data commitment merkle node/root - sealed and replicated (CommR)
	FilCommitmentSealed Codec = 0xf102
	// holochain: Holochain v0 address    + 8 R-S (63 x Base-32)
	HolochainAdrV0 Codec = 0x807124
	// holochain: Holochain v1 address    + 8 R-S (63 x Base-32)
	HolochainAdrV1 Codec = 0x817124
	// holochain: Holochain v0 public key + 8 R-S (63 x Base-32)
	HolochainKeyV0 Codec = 0x947124
	// holochain: Holochain v1 public key + 8 R-S (63 x Base-32)
	HolochainKeyV1 Codec = 0x957124
	// holochain: Holochain v0 signature  + 8 R-S (63 x Base-32)
	HolochainSigV0 Codec = 0xa27124
	// holochain: Holochain v1 signature  + 8 R-S (63 x Base-32)
	HolochainSigV1 Codec = 0xa37124
)
